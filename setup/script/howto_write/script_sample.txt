#AKARIに必要なライブラリのインストール用スクリプトの説明用サンプル

####ここは基本的に共通とする###
#!/bin/bash
# -*- coding: utf-8 -*-
## シェルオプション
set -e           # コマンド実行に失敗したらエラー。スクリプトの実行を停止する。
set -u           # 未定義の変数にアクセスしたらエラー。スクリプトの実行を停止する。
set -o pipefail  # パイプのコマンドが失敗したらエラー（bashのみ）。スクリプトの実行を停止する。

SCRIPT_DIR=$(cd $(dirname $0); pwd)            # スクリプトがあるフォルダパスを定義
PARENT_DIR=`pwd | xargs dirname`               # akarimainpcのフォルダパスを定義
. `dirname $0`/lib/common.bash                 # 共通の関数や定数をライブラリからロード
###ここまで共通###

titleEcho "apt update"
apt_check_and_update                          #一定時間内にapt updateを実行していたらスキップする関数。comon/lb内のAPT_UPDATED_MINUTESで時間定義。

titleEcho "Install hoge" #ステップごとにタイトル文を強調表示する関数
apt_check_and_install hoge                    #hogeライブラリがインストールされているか確認し、されていない場合apt install を実行する関数。

titleEcho "install hoge"
pip_check_and_install hoge                    #hogeライブラリがインストールされているか確認し、されていない場合pip install を実行する関数。pip2とpip3両方実行する。


titleEcho " Add current user to dialout group"
if groups $USER | grep dialout > /dev/null; then #できれば重複実行を避けるため、判定文を入れる

titleEcho "Install hoge"
if hoge > /dev/null; then                    #できれば重複実行を避けるため、判定文を入れる。">/dev/null"とすることで、if以下の実行結果がコンソール上に表示されるのを回避
 skipEcho "hoge has been available."　　　　 #すでに実行されており、実行の必要がない場合のskip文を表示する関数
else 
 fuga
 successEcho "huga was installed." 　　　　  #実行が成功した場合のsuccess文を表示する関数
fi

####ここは基本的に共通とする###
echo -e " "
echo -e "\e[32;1m----------------------------------------\e[m"
echo -e "\e[32;1mAll steps were finished!!\e[m"
echo -e "\e[32;1m----------------------------------------\e[m"
echo -e " "
###ここまで共通###