// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: akira_proto/service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AkariServiceServiceClient is the client API for AkariServiceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AkariServiceServiceClient interface {
	ListInstances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*ServiceInstance, error)
	TerminateInstance(ctx context.Context, in *TerminateInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LaunchJupyterService(ctx context.Context, in *LaunchJupyterServiceRequest, opts ...grpc.CallOption) (*ServiceInstance, error)
}

type akariServiceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAkariServiceServiceClient(cc grpc.ClientConnInterface) AkariServiceServiceClient {
	return &akariServiceServiceClient{cc}
}

func (c *akariServiceServiceClient) ListInstances(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/akira_proto.AkariServiceService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akariServiceServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*ServiceInstance, error) {
	out := new(ServiceInstance)
	err := c.cc.Invoke(ctx, "/akira_proto.AkariServiceService/GetInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akariServiceServiceClient) TerminateInstance(ctx context.Context, in *TerminateInstanceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/akira_proto.AkariServiceService/TerminateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *akariServiceServiceClient) LaunchJupyterService(ctx context.Context, in *LaunchJupyterServiceRequest, opts ...grpc.CallOption) (*ServiceInstance, error) {
	out := new(ServiceInstance)
	err := c.cc.Invoke(ctx, "/akira_proto.AkariServiceService/LaunchJupyterService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AkariServiceServiceServer is the server API for AkariServiceService service.
// All implementations must embed UnimplementedAkariServiceServiceServer
// for forward compatibility
type AkariServiceServiceServer interface {
	ListInstances(context.Context, *emptypb.Empty) (*ListInstancesResponse, error)
	GetInstance(context.Context, *GetInstanceRequest) (*ServiceInstance, error)
	TerminateInstance(context.Context, *TerminateInstanceRequest) (*emptypb.Empty, error)
	LaunchJupyterService(context.Context, *LaunchJupyterServiceRequest) (*ServiceInstance, error)
	mustEmbedUnimplementedAkariServiceServiceServer()
}

// UnimplementedAkariServiceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAkariServiceServiceServer struct {
}

func (UnimplementedAkariServiceServiceServer) ListInstances(context.Context, *emptypb.Empty) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedAkariServiceServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*ServiceInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedAkariServiceServiceServer) TerminateInstance(context.Context, *TerminateInstanceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateInstance not implemented")
}
func (UnimplementedAkariServiceServiceServer) LaunchJupyterService(context.Context, *LaunchJupyterServiceRequest) (*ServiceInstance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchJupyterService not implemented")
}
func (UnimplementedAkariServiceServiceServer) mustEmbedUnimplementedAkariServiceServiceServer() {}

// UnsafeAkariServiceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AkariServiceServiceServer will
// result in compilation errors.
type UnsafeAkariServiceServiceServer interface {
	mustEmbedUnimplementedAkariServiceServiceServer()
}

func RegisterAkariServiceServiceServer(s grpc.ServiceRegistrar, srv AkariServiceServiceServer) {
	s.RegisterService(&AkariServiceService_ServiceDesc, srv)
}

func _AkariServiceService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkariServiceServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akira_proto.AkariServiceService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkariServiceServiceServer).ListInstances(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkariServiceService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkariServiceServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akira_proto.AkariServiceService/GetInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkariServiceServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkariServiceService_TerminateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkariServiceServiceServer).TerminateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akira_proto.AkariServiceService/TerminateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkariServiceServiceServer).TerminateInstance(ctx, req.(*TerminateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AkariServiceService_LaunchJupyterService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchJupyterServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AkariServiceServiceServer).LaunchJupyterService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/akira_proto.AkariServiceService/LaunchJupyterService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AkariServiceServiceServer).LaunchJupyterService(ctx, req.(*LaunchJupyterServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AkariServiceService_ServiceDesc is the grpc.ServiceDesc for AkariServiceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AkariServiceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "akira_proto.AkariServiceService",
	HandlerType: (*AkariServiceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListInstances",
			Handler:    _AkariServiceService_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _AkariServiceService_GetInstance_Handler,
		},
		{
			MethodName: "TerminateInstance",
			Handler:    _AkariServiceService_TerminateInstance_Handler,
		},
		{
			MethodName: "LaunchJupyterService",
			Handler:    _AkariServiceService_LaunchJupyterService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "akira_proto/service.proto",
}
