syntax = "proto3";

package akira_proto;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

option go_package = "github.com/AkariGroup/akari_software/internal/akira/proto";


enum ServiceState {
    TERMINATED = 0;
    STARTING = 1;
    RUNNING = 2;
    STOPPING = 3;
    ERROR = 4;
    STOPPED = 5;
}

enum ServiceType {
    USER = 0;
    SYSTEM = 1;
}

message ServiceImage {
  string id = 1;
  string name = 2;
  string version = 3;
  string display_name = 4;
  string description = 5;
  repeated string capabilities = 6;
}

message Service {
  string id = 1;
  optional ServiceImage image = 2;
  string display_name = 3;
  string description = 4;
  ServiceState state = 5;
  ServiceType type = 6;
  repeated string capabilities = 7;
  bool auto_start = 8;
}

message ListImagesResponse {
  repeated ServiceImage images = 1;
}

message ListServicesResponse {
  repeated Service services = 1;
}

message GetImageRequest {
  string id = 1;
}

message CreateServiceRequest {
  string image_id = 1;
  string display_name = 2;
  string description = 3;
}

message GetServiceRequest {
  string id = 1;
}

message EditServiceRequest {
  string id = 1;
  string display_name = 2;
  string description = 3;
}

message SetAutoStartRequest {
  string id = 1;
  bool auto_start = 2;
}

message RemoveServiceRequest {
  string id = 1;
}

message StartServiceRequest {
  string id = 1;
}

message StopServiceRequest {
  string id = 1;
  bool terminate = 2;
}

message TerminateServiceRequest {
  string id = 1;
}

message CleanServiceRequest {
  string id = 1;
}

message GetServiceLogRequest {
  string id = 1;
}

message GetServiceLogResponse {
  string logs = 1;
}

message OpenRequest {
  string id = 1;
  string api_hostname = 2;
}

message OpenResponse {
  string url = 1;
}

message OpenProjectRequest {
  string id = 1;
  string api_hostname = 2;
  string project_id = 3;
}

message OpenProjectResponse {
  string url = 1;
}

service AkariServiceService {
  rpc ListImages(google.protobuf.Empty) returns (ListImagesResponse) {
    option (google.api.http) = {
      get: "/service-images"
    };
  }

  rpc GetImage(GetImageRequest) returns (ServiceImage) {
    option (google.api.http) = {
      get: "/service-images/{id}"
    };
  }

  rpc ListServices(google.protobuf.Empty) returns (ListServicesResponse) {
    option (google.api.http) = {
      get: "/services"
    };
  }

  rpc CreateService(CreateServiceRequest) returns (Service) {
    option (google.api.http) = {
      post: "/services"
      body: "*"
    };
  }

  rpc GetService(GetServiceRequest) returns (Service) {
    option (google.api.http) = {
      get: "/services/{id}"
    };
  }

  rpc EditService(EditServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/edit"
      body: "*"
    };
  }

  rpc SetAutoStartService(SetAutoStartRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/auto_start"
      body: "*"
    };
  }

  rpc RemoveService(RemoveServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/remove"
    };
  }

  rpc StartService(StartServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/start"
    };
  }

  rpc StopService(StopServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/stop"
      body: "*"
    };
  }

  rpc TerminateService(TerminateServiceRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/services/{id}/terminate"
    };
  }

  rpc GetServiceLog(GetServiceLogRequest) returns (GetServiceLogResponse) {
    option (google.api.http) = {
      get: "/services/{id}/logs"
    };
  }

  rpc Open(OpenRequest) returns (OpenResponse) {
    option (google.api.http) = {
      get: "/services/{id}/open"
    };
  }

  rpc OpenProject(OpenProjectRequest) returns (OpenProjectResponse) {
    option (google.api.http) = {
      get: "/services/{id}/open_project"
    };
  }
}
